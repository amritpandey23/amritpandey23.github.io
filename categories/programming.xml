<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Amrit's Blog (Posts about programming)</title><link>https://amritpandey23.github.io/</link><description></description><atom:link href="https://amritpandey23.github.io/categories/programming.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2024 &lt;a href="mailto:mail.amritpandey@gmail.com"&gt;Amrit&lt;/a&gt; </copyright><lastBuildDate>Tue, 05 Nov 2024 13:45:51 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>To GC or not to GC</title><link>https://amritpandey23.github.io/posts/2024/05/garbage-collector-then-a-boon-now-a-curse/</link><dc:creator>Amrit</dc:creator><description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: this article is meant for beginners and tech enthusiasts and include purely my opinions.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Programs require memory management&lt;/h3&gt;
&lt;p&gt;Computer memory is a finite resource. By memory, I am referring to the primary memory (RAM) used by the OS to store, retrieve, and process data of programs during runtime. Typically, an average PC user will have 8 to 16 gigabytes of RAM, which is shared by all the apps running on their PC. Because we have a finite resource in terms of memory, this poses a significant challenge for programmers to effectively manage the resources, i.e., memory, without compromising the reliability and usability of the OS.&lt;/p&gt;
&lt;p&gt;We can understand the problem of memory management with the help of an example: Let's suppose you write a program (in any programming language of your choice) that runs indefinitely to collect a bunch of numbers from the user, store them, and print them in your terminal. It would look like this to the user:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Enter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;OUT&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Enter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;OUT&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;2,4&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Enter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;OUT&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;2,4,8&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Enter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;OUT&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;2,4,8,10&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Enter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;OUT&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;2,4,8,10,6&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To realize this program I'll write some code in my hypothetical programming language like this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nt"&gt;number_store&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;NULL&lt;/span&gt;
&lt;span class="nt"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;true&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;print("Enter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;read_number()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;(number_store&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;NULL)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;number_store&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Integer&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;number_store_new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Integer&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;number_store.current_size&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;copy(number_store,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;number_store_new)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;number_store_new&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;number_store.current_size&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;number_store&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;number_store_new&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;number_store&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above code is quite straightforward. Here, we allow the user to enter a number and then save that number in an array after increasing its size by one. When we create an array with the new keyword, in the background, the language reserves some memory space. Initially, memory space equivalent to size 1 is reserved, but as the user enters more numbers, more memory is reserved. However, this leads to a fundamental problem! When we create a new array and assign the old variable to this new array, what happens to the old array and the memory we allocated to it during runtime? Where does that memory go?&lt;/p&gt;
&lt;p&gt;The answer is that it doesn't go anywhere! It still resides in the memory of our PC. As long as our program executes, the memory we reserved will be locked and unusable by any other program. This phenomenon is also known as a &lt;a href="https://en.wikipedia.org/wiki/Memory_leak"&gt;Memory Leak&lt;/a&gt; in computer science lingo.&lt;/p&gt;
&lt;p&gt;We can solve this problem by introducing functionality to free up the memory that is no longer requires as follows:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;number_store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NULL&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Enter number: "&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read_number&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number_store&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;number_store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;number_store&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;number_store_new&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;number_store&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_size&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number_store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number_store_new&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;number_store_new&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;number_store&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_size&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;number_store&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;deallocate&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt;
        &lt;span class="n"&gt;number_store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;number_store_new&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;assign&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number_store&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However ingenious this solution may look, it's not new. Primitive but high-level programming languages like C and C++ already have library functions such as &lt;code&gt;alloc&lt;/code&gt;, &lt;code&gt;free&lt;/code&gt;, &lt;code&gt;new&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, etc., that perform this task. But manual memory management like this puts extra strain on developers to write memory management logic in addition to complex business code. Hence, there is a need for a tool or application that can run behind the scenes to manage memory with minimal to no programmer intervention.&lt;/p&gt;
&lt;p&gt;This memory which has no use to the program during runtime and yet resides in the memory is referred to as &lt;em&gt;Garbage&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Garbage Collectors solves memory management&lt;/h3&gt;
&lt;p&gt;To solve the problem of automatic garbage collection, the &lt;a href="https://en.wikipedia.org/wiki/Lisp_(programming_language)"&gt;LISP programming language&lt;/a&gt; introduced &lt;a href="https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)"&gt;garbage collection&lt;/a&gt; for the first time. Garbage collectors are programs that run implicitly during the runtime of a program and free up memory that is no longer required by the program, allowing other programs to utilize the blocks. For example, in our program above, if we use a garbage collector we would typically make it to free up the memory space acquired by the old array once we copy the values from the old memory whenever a user enter new number. In real world, garbage collectors are complex components and use sophesticated algorithms to free up the memory during runtime. However, we aren't going to discuss such algorithms here.&lt;/p&gt;
&lt;h3&gt;Garbage Collectors become problem themselves&lt;/h3&gt;
&lt;p&gt;Garbage collectors solve crucial memory management issues by preventing leaks, but they add runtime overhead, reducing overall performance. In the &lt;a href="https://en.wikipedia.org/wiki/Java_(programming_language)"&gt;Java programming language&lt;/a&gt;, each JVM instance runs its own garbage collector, which makes Java programs inefficient in terms of performance. Running GC in Java causes an increase in pause time while cleaning the memory, overhead in the heap memory which resides in the primary memory, increased latency, and more CPU usage. In addition to this, the efficiency of GCs also comes with the underlying running algorithms, which may cause complexity in certain use cases. It's conclusive to say that, as programming language carries a liability of memory management, solving this problem leads to even problems fulfilling the adage that &lt;em&gt;Programs themselves are bugs&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Can we do without garbage collectors?&lt;/h3&gt;
&lt;p&gt;The use of GC in programming languages is a boon for developers, but they do come at a cost. So a natural question arises: can we do without a GC? Or can we figure out a solution where the tradeoff between manually managing the memory and automatically preventing memory leaks can be effective? The answer to this question may lie in the new programming language on the horizon: &lt;a href="https://en.wikipedia.org/wiki/Rust_(programming_language)"&gt;Rust&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Rust is a fairly new programming language with C-like syntax that has removed both manual memory management modules as well as the Garbage Collector. Rust has implemented strict rules in syntax to prevent developers from ever occupying redundant memory space by implementing &lt;a href="https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization"&gt;RAII (Resource Acquisition Is Initialization)&lt;/a&gt; through proposing the concept of &lt;a href="https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html"&gt;ownership&lt;/a&gt;. In a nutshell, the concept of ownership tells us that each memory space currently occupied in the language will have an owner. If the owner of the memory dies, is removed, or is reassigned to another memory space, then that memory space is immediately deallocated. Additionally, an owner may own more than one memory space, which is completely fine, but if the owner is removed, then all the memory is also removed.&lt;/p&gt;
&lt;p&gt;Implementing solutions like RAII again comes at a cost. Since the onus is now on the language to prevent developers from creating duplicate owners of memory space, it restricts developers from free-style and multi-paradigm coding.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;With this, we have reached the end of our article: "To GC or not To GC." Rust has provided us with an example of how a language can operate without the implementation of GC in the language runtime, making itself fast and efficient. The trade-off on syntax strictness is also fair, as developers don't have to worry about manual memory management. However, GCs exist in almost all popular programming languages like Go, Python, Swift, etc., and aren't going anywhere. I believe that in the future, a solution must emerge that tries to solve the problem of memory management with a mix of both concepts: Garbage Collection and RAII.&lt;/p&gt;</description><category>programming</category><guid>https://amritpandey23.github.io/posts/2024/05/garbage-collector-then-a-boon-now-a-curse/</guid><pubDate>Sat, 18 May 2024 12:44:09 GMT</pubDate></item><item><title>Simple path to get good in DSA</title><link>https://amritpandey23.github.io/posts/2024/03/simple-path-to-get-good-in-dsa/</link><dc:creator>Amrit</dc:creator><description>&lt;p&gt;Preparing to tackle Data Structures and Algorithms (DSA) effectively involves a dual approach, which I categorize as "Mathematics" and "Intuition". Much like mathematics, where one begins with learning theorems and formulas before solving problems, mastering DSA requires a solid foundation in popular data structures and algorithms followed by honing problem-solving intuition.&lt;/p&gt;
&lt;h4&gt;Part 1: Mathematics&lt;/h4&gt;
&lt;p&gt;Start by comprehensively understanding and committing to memory all essential algorithms in DSA. Progress through the following levels:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Math + Array + String&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hashing (Hashset, HashMap) + Stack + Queue&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Graph&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Linked List + Binary Tree + BST + AVL + RB&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dynamic Programming&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Acquiring a deep understanding of each topic is paramount. Without ingraining these algorithms into memory, solving problems becomes significantly more challenging. It's akin to knowing what needs to be done but struggling to articulate it. Therefore, prioritize memorizing algorithms for each topic. Here's a breakdown of algorithms for each category:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Math:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LCM&lt;/li&gt;
&lt;li&gt;GCD&lt;/li&gt;
&lt;li&gt;Is Prime&lt;/li&gt;
&lt;li&gt;Sieve of Eratosthenes&lt;/li&gt;
&lt;li&gt;Binary Exponentiation&lt;/li&gt;
&lt;li&gt;Modular Exponentiation&lt;/li&gt;
&lt;li&gt;Karatsuba&lt;/li&gt;
&lt;li&gt;Fermat's little theorem&lt;/li&gt;
&lt;li&gt;Bit arithematic&lt;/li&gt;
&lt;li&gt;Permutation&lt;/li&gt;
&lt;li&gt;Combination&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Array:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linear Search&lt;/li&gt;
&lt;li&gt;Binary Search&lt;/li&gt;
&lt;li&gt;Bubble Sort&lt;/li&gt;
&lt;li&gt;Selection Sort&lt;/li&gt;
&lt;li&gt;Insertion Sort&lt;/li&gt;
&lt;li&gt;Merge Sort&lt;/li&gt;
&lt;li&gt;Quick Sort&lt;/li&gt;
&lt;li&gt;Counting Sort&lt;/li&gt;
&lt;li&gt;Radix Sort&lt;/li&gt;
&lt;li&gt;Heap Sort&lt;/li&gt;
&lt;li&gt;Shell Sort&lt;/li&gt;
&lt;li&gt;Bucket Sort&lt;/li&gt;
&lt;li&gt;Cycle Sort&lt;/li&gt;
&lt;li&gt;Two Pointer&lt;/li&gt;
&lt;li&gt;Three Pointer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;String:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All String manipulation methods in programming language of choice.&lt;/li&gt;
&lt;li&gt;Rabin-Karp&lt;/li&gt;
&lt;li&gt;KMP&lt;/li&gt;
&lt;li&gt;Boyre Moore&lt;/li&gt;
&lt;li&gt;Trie&lt;/li&gt;
&lt;li&gt;Levenshtein Distance&lt;/li&gt;
&lt;li&gt;Longest Common Subsequence&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Hashing:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hashset&lt;/li&gt;
&lt;li&gt;Hashmaps&lt;/li&gt;
&lt;li&gt;Using arrays as maps&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Stacks &amp;amp; Queues:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Know-How&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Graph:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BFS&lt;/li&gt;
&lt;li&gt;DFS&lt;/li&gt;
&lt;li&gt;Dijkstra's Algorithm&lt;/li&gt;
&lt;li&gt;Bellman-Ford Algorithm&lt;/li&gt;
&lt;li&gt;Floyd-Warshall Algorithm&lt;/li&gt;
&lt;li&gt;Prim's Algorithm&lt;/li&gt;
&lt;li&gt;Kruskal's Algorithm&lt;/li&gt;
&lt;li&gt;Topological Sorting&lt;/li&gt;
&lt;li&gt;Tarjan's Algorithm&lt;/li&gt;
&lt;li&gt;Kosaraju's Algorithm&lt;/li&gt;
&lt;li&gt;Bipartite Checking&lt;/li&gt;
&lt;li&gt;Articulation Points&lt;/li&gt;
&lt;li&gt;Eulerian Path and Circuit&lt;/li&gt;
&lt;li&gt;Hamiltonian Path and Circuit&lt;/li&gt;
&lt;li&gt;Minimum Cut&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Linked List, Binary Tree, Binary Search Tree, AVL Tree, RB Tree:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Know-How&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Dynamic Programming(Classical problems):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fibonacci Series&lt;/li&gt;
&lt;li&gt;Longest Common Subsequence&lt;/li&gt;
&lt;li&gt;Longest Incresing Subsequence&lt;/li&gt;
&lt;li&gt;Knapsack Problem&lt;/li&gt;
&lt;li&gt;Matrix Chain Multiplication&lt;/li&gt;
&lt;li&gt;Edit Distance&lt;/li&gt;
&lt;li&gt;Coin Change Problem&lt;/li&gt;
&lt;li&gt;Subset Sum Problem&lt;/li&gt;
&lt;li&gt;Partition Equal Subset Sum&lt;/li&gt;
&lt;li&gt;0/1 Knapsack Problem&lt;/li&gt;
&lt;li&gt;Maximum Subarray Sum&lt;/li&gt;
&lt;li&gt;Rod Cutting Problem&lt;/li&gt;
&lt;li&gt;Coin Row Problem&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The list is not complete but you can get exhaustive list of algorithms anywhere on the internet.&lt;/p&gt;
&lt;h4&gt;Part 2: Intuition&lt;/h4&gt;
&lt;p&gt;Upon completing each level, immerse yourself in problem-solving. These problems demand more than just applying memorized algorithms; they require a deep understanding of the problem and the ability to adapt standard algorithms to solve specific scenarios. Consider the memorized algorithms as templates that guide your problem-solving approach.&lt;/p&gt;
&lt;p&gt;Only tackle problems related to each level after memorizing all relevant algorithms. To access such problems, utilize platforms like LeetCode and filter by tags corresponding to each topic.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;One crucial tip:&lt;/strong&gt; Avoid fixating on the number of problems solved. While seeing the count rise can be momentarily gratifying, it can also impede progress. Instead, focus on intrinsic motivation and improvement in problem-solving intuition. Think of it as long-term fitness training; it's not about how many drills you perform but how effectively you perform in the actual game.&lt;/p&gt;
&lt;p&gt;By adopting this comprehensive approach, you'll not only master DSA but also develop robust problem-solving skills essential for real-world applications. Remember, it's a journey of continual learning and refinement rather than a race to accumulate problem-solving streaks.&lt;/p&gt;
&lt;p&gt;That is all one has to do to get good at DSA. Nothing more and nothing less. Getting good at DSA is not essential for doing your job i.e. software engineering but it is a benchmark over which you will be hired and you will hire others. In the beginning of our job we will find ourselves solving DSA problems for getting one and in the latter we will asking DSA questions for giving one.&lt;/p&gt;</description><category>career</category><category>programming</category><guid>https://amritpandey23.github.io/posts/2024/03/simple-path-to-get-good-in-dsa/</guid><pubDate>Sat, 02 Mar 2024 11:24:23 GMT</pubDate></item></channel></rss>